{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","selected","prevProps","todos","length","this","props","setState","filter","todo","completed","map","id","className","type","value","query","onChange","event","setCriterion","setQuery","target","criterion","key","classNames","includes","checked","title","onClick","setUser","userId","React","Component","request","url","options","fetch","then","res","ok","Error","status","statusText","json","getUsers","CurrentUser","user","LoadUser","data","name","email","phone","defUser","App","filteredTodos","selectedUserId","setSelectedUser","setDafaultUser","str","criter","IDsOfSelected","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.44f9fa42.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    selected: [],\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.todos.length\n        !== this.props.todos.length\n        && prevProps.todos.length === 0\n    ) {\n      /* eslint-disable */ \n      this.setState({\n        selected: this.props.todos.filter(todo => todo.completed === true).map(todo => todo.id),\n      })\n       /* eslint-enable */\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <input\n          type=\"text\"\n          value={this.props.query}\n          onChange={((event) => {\n            this.props.setCriterion(`all`);\n            this.props.setQuery(event.target.value);\n          })}\n        />\n        {' '}\n        <select\n          value={this.props.criterion}\n          onChange={(event) => {\n            this.props.setCriterion(\n              event.target.value, [...this.state.selected],\n            );\n          }}\n        >\n          <option value=\"\">chose your variant</option>\n          <option\n            value=\"all\"\n          >\n            all\n          </option>\n          <option\n            value=\"completed\"\n          >\n            completed\n          </option>\n          <option\n            value=\"active\"\n          >\n            active\n          </option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {this.props.todos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item', {\n                    'TodoList__item--unchecked':\n                  !this.state.selected.includes(todo.id),\n                    'TodoList__item--checked':\n                  this.state.selected.includes(todo.id),\n                  },\n                )}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={this.state.selected.includes(todo.id)}\n                    onChange={() => {\n                      if (!this.state.selected.includes(todo.id)) {\n                        this.setState(state => ({\n                          selected: [...state.selected, todo.id],\n                        }));\n                      } else {\n                        this.setState(state => ({\n                          selected: state.selected.filter(id => id !== todo.id),\n                        }));\n                      }\n                    }}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n                <button\n                  className=\"\n                   TodoList__user-button\n                   TodoList__user-button--selected\n                   button\n                  \"\n                  type=\"button\"\n                  onClick={() => {\n                    this.props.setUser(todo.userId);\n                  }}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape(\n    {\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    },\n  ).isRequired).isRequired,\n  setCriterion: PropTypes.func.isRequired,\n  criterion: PropTypes.string.isRequired,\n  query: PropTypes.string.isRequired,\n  setUser: PropTypes.func.isRequired,\n  setQuery: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\n/* eslint-disable */\nconst request = (url, options) => {\n  return fetch(`${BASE_URL}${url}`, options)\n    .then((res) => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n};\n\nexport const getTodos = () => {\n  return request('/todos');\n};\n\nexport const getUsers = (id) => {\n  return request(`/users/${id}`);\n};\n/* eslint-enable */\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUsers } from '../../api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: {},\n  }\n\n  async componentDidMount() {\n    if (this.props.userId) {\n      await this.LoadUser(this.props.userId);\n    }\n  }\n\n  async componentDidUpdate(prevProps) {\n    if ((prevProps.userId !== this.props.userId) && this.props.userId) {\n      await this.LoadUser(this.props.userId);\n    }\n  }\n\n  async LoadUser(id) {\n    const user = await getUsers(id);\n\n    this.setState({ user: user.data });\n  }\n\n  render() {\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          {this.state.user\n             && (\n               <span>\n                 Selected user:\n                 {' '}\n                 {this.props.userId}\n               </span>\n             )}\n        </h2>\n        <h3 className=\"CurrentUser__name\">{this.state.user?.name}</h3>\n        <p className=\"CurrentUser__email\">{this.state.user?.email}</p>\n        <p className=\"CurrentUser__phone\">{this.state.user?.phone}</p>\n        {!this.state.user ? 'No such a user' : ''}\n        {' '}\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={this.props.defUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  defUser: PropTypes.func.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    filteredTodos: [],\n    selectedUserId: 0,\n    query: '',\n    criterion: '',\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        const todosFromServer = todos.data.filter(todo => todo.userId !== null);\n\n        this.setState({\n          todos: todosFromServer,\n          filteredTodos: todosFromServer,\n        });\n      });\n  }\n\n  setSelectedUser = (id) => {\n    this.setState({ selectedUserId: id });\n  };\n\n  setDafaultUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  setQuery = (str) => {\n    this.setState({\n      query: str,\n    });\n    this.setState(state => ({\n      filteredTodos: state.todos.filter(todo => todo.title.includes(str)),\n    }));\n  }\n\n  setCriterion = (criter, IDsOfSelected) => {\n    this.setState({\n      criterion: criter,\n    });\n    if (criter === 'all') {\n      this.setState(state => ({\n        filteredTodos: [...state.todos],\n      }));\n    } else if (criter === 'active') {\n      this.setState(state => ({\n        filteredTodos: state.todos.filter(\n          todo => !IDsOfSelected.includes(todo.id),\n        ),\n      }));\n    } else {\n      this.setState(state => ({\n        filteredTodos: state.todos.filter(\n          todo => IDsOfSelected.includes(todo.id),\n        ),\n      }));\n    }\n  }\n\n  render() {\n    const { filteredTodos, selectedUserId, query, criterion } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            setCriterion={this.setCriterion}\n            criterion={criterion}\n            query={query}\n            setQuery={this.setQuery}\n            todos={filteredTodos}\n            setUser={this.setSelectedUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                defUser={this.setDafaultUser}\n                userId={selectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}